@page "/adminPanel"
@using invMed.Data
@using invMed.Controls
@inject AdminService adminService
@inject IDialogService DialogService


@attribute [Authorize(Roles = "Admin")]

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4 mt-4">Admin Panel Dashboard</MudText>
<MudGrid>
    <MudItem xs="12" sm="6" md="6" lg="3">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height: 100px;">
            <MudIcon Icon="@Icons.Material.Filled.Public" Color="Color.Success" Class="mx-4" Style="width: 54px; height: 54px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">System</MudText>
                @if (users is not null)
                {
                    <MudText Typo="Typo.h5">online</MudText>
                }
                else
                {
                    <MudText Typo="Typo.h5">ofline</MudText>
                }
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="6" lg="3">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height: 100px;">
            <MudIcon Icon="@Icons.Material.Filled.People" Color="Color.Secondary" Class="mx-4" Style="width: 54px; height: 54px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Users</MudText>
                @if (users is not null)
                {
                    <MudText Typo="Typo.h5">@users.Count</MudText>
                }
                else
                {
                    <MudProgressCircular Size="Size.Small" Color="Color.Primary" Indeterminate="true" />
                }
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="6" lg="3">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height: 100px;">
            <MudIcon Icon="@Icons.Material.Filled.People" Class="mx-4" Style="width: 54px; height: 54px;"></MudIcon>
            <div>
                <MudButton Class="mt-2 mr-10" Variant="Variant.Filled" @onclick="OpenDeactivatedAccountsDialog">Deactivated Accounts</MudButton>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="6" lg="3">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height: 100px;">
            <MudIcon Icon="@Icons.Material.Filled.PersonAdd" Color="Color.Warning" Class="mx-4" Style="width: 54px; height: 54px;"></MudIcon>
            <div>
                <MudButton Class="mt-2 mr-10" Variant="Variant.Filled" Color="Color.Primary" @onclick="OpenCreateAccountDialog">Create Account</MudButton>
            </div>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" lg="8">
        <MudPaper Elevation="25" Class="pa-4" Style="min-height: 608px;">
            @if (users is not null)
            {
                <MudTable Breakpoint="Breakpoint.Sm" RowsPerPage="5" Elevation="0" Items="@users" Hover="true" Filter="new Func<UserView, bool>(FilterFunc)" HorizontalScrollbar="true">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Users</MudText>
                        <MudToolBarSpacer />
                        <MudTextField Immediate="true" @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <ColGroup>
                        <col />
                        <col />
                        <col />
                        <col />
                        <col style="width: 20px" />
                    </ColGroup>
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>UserName</MudTh>
                        <MudTh>Email</MudTh>
                        <MudTh>Role</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Name">@context.Name @context.Surname</MudTd>
                        <MudTd DataLabel="UserName">@context.UserName</MudTd>
                        <MudTd DataLabel="Email" HideSmall="true">@context.Email</MudTd>
                        <MudTd DataLabel="Role">@context.Role</MudTd>
                        <MudTd DataLabel="Manage">
                            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                                <MudMenuItem @onclick="@((e) => OpenDetailsDialog(context))">Details</MudMenuItem>
                                <MudMenuItem @onclick="@((e) => OpenEditDialog(context))">Edit</MudMenuItem>
                                <MudMenuItem @onclick="@((e) => OpenResetPasswordDialog(context))">Reset<br />password</MudMenuItem>
                                <MudMenuItem @onclick="@((e) => OpenManageDialog(context))">Manage</MudMenuItem>
                            </MudMenu>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[] {5}" RowsPerPageString="Users per page" />
                    </PagerContent>
                </MudTable>
            }
            else
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
            }
        </MudPaper>
    </MudItem>

    <MudItem xs="12" lg="4">
        <MudPaper Elevation="25" Class="pa-4" Style="height: 608px;">
            @if (rolesNumbers is not null)
            {
                <MudText Class="mt-4 ml-2" Typo="Typo.h6">User Roles</MudText>
                <MudChart Class="pt-16" ChartType="ChartType.Donut" InputData="@rolesNumbers" InputLabels="@rolesLabels" Style="max-height: 440px"></MudChart>
            }
            else
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
            }
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    private List<UserView> users;
    private string searchString = "";
    private double[] rolesNumbers;
    private string[] rolesLabels = { "Admin", "Manager", "User" };
    private DialogOptions maxDialogWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };

    protected override async Task OnInitializedAsync()
    {
        users = await Task.Run(() => adminService.GetUsers());
        rolesNumbers = GetRolesArray();
    }

    private bool FilterFunc(UserView user)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if ($"{user.Name} {user.Surname} {user.Email} {user.UserName} {user.Role}".Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void OpenDetailsDialog(UserView user)
    {
        var parameters = new DialogParameters { ["user"] = user };
        DialogService.Show<UserDetailsDialog>("User details", parameters, maxDialogWidth);
    }

    private async Task OpenEditDialog(UserView user)
    {
        var parameters = new DialogParameters { ["userId"] = user.Id, ["role"] = user.Role };
        var dialog = DialogService.Show<UserEditDialog>("Edit user", parameters, maxDialogWidth);
        var result = await dialog.Result;

        if (result is not null)
        {
            users = await Task.Run(() => adminService.GetUsers());
        }
    }

    private async Task OpenManageDialog(UserView user)
    {
        var parameters = new DialogParameters { ["userId"] = user.Id, ["role"] = user.Role };
        var dialog = DialogService.Show<UserManageDialog>("Manage user", parameters, maxDialogWidth);
        var result = await dialog.Result;

        if (result is not null)
        {
            users = await Task.Run(() => adminService.GetUsers());
            rolesNumbers = GetRolesArray();
        }
    }

    private async Task OpenCreateAccountDialog()
    {
        var dialog = DialogService.Show<CreateAccountDialog>("Create account", maxDialogWidth);
        var result = await dialog.Result;
        if (result is not null)
        {
            users = await Task.Run(() => adminService.GetUsers());
            rolesNumbers = GetRolesArray();
        }
    }

    private async Task OpenDeactivatedAccountsDialog()
    {
        var dialog = DialogService.Show<DeactivatedAccountsDialog>("Deactivated accounts", maxDialogWidth);
        var result = await dialog.Result;
        if (result is not null)
        {
            users = await Task.Run(() => adminService.GetUsers());
            rolesNumbers = GetRolesArray();
        }
    }

    private async Task OpenResetPasswordDialog(UserView user)
    {
        var parameters = new DialogParameters { ["userId"] = user.Id, ["role"] = user.Role };
        var dialog = DialogService.Show<PasswordResetDialog>("Reset password", parameters, maxDialogWidth);
    }

    private double[] GetRolesArray()
    {
        return new double[] { users.Count(u => u.Role == "Admin"), users.Count(u => u.Role == "Manager"), users.Count(u => u.Role == "User") };
    }

}