@page "/products"
@using invMed.Data
@using invMed.Controls.Products
@using invMed.Data.Enums
@inject IDialogService DialogService
@inject ProductsService productsService
@inject SearchService searchService

@attribute [Authorize(Roles = "Admin")]

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4 mt-4">Produkty</MudText>
<MudGrid>
    <MudItem xs="12" sm="6" md="6" lg="9">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height: 100px;">
            <MudIcon Icon="@Icons.Material.Filled.Search" Color="Color.Primary" Class="mx-4" Style="width: 54px; height: 54px;"></MudIcon>
            <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Wyszukiwarka</MudText>
            <MudAutocomplete T="SearchDto" Label="Szukaj" Class="ml-4 mr-4" Clearable="true" ResetValueOnEmptyText="true" ToStringFunc="@(e=> e==null ? null : e.Type == SearchType.Product ? e.Name : e.Barcode)" Value="searchValue" ValueChanged="OpenSearchDialog" SearchFunc="@Search" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary">
                <ItemTemplate Context="e">
                    <MudText>
                        @(e.Type == SearchType.Item ? e.Barcode : e.Name)
                    </MudText>
                    <MudText Typo="Typo.caption">
                        @(e.Type == SearchType.Item ? e.Name : e.Category)
                    </MudText>
                </ItemTemplate>
            </MudAutocomplete>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="6" lg="3">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height: 100px;">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mx-4" Style="width: 54px; height: 54px;"></MudIcon>
            <div>
                <MudButton Class="mt-2 mr-10" Variant="Variant.Filled" Color="Color.Primary" @onclick="OpenAddProductDialog">Utwórz produkt</MudButton>
            </div>
        </MudPaper>
    </MudItem>

    <MudItem xs="12">
        <MudPaper Elevation="25" Class="pa-4" Style="min-height: 680px;">
            @if (products is not null)
            {
                <MudTable Dense="true" Breakpoint="Breakpoint.Sm" RowsPerPage="8" Elevation="0" Items="@products" Hover="true" Filter="new Func<Product, bool>(FilterFunc)" HorizontalScrollbar="true">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Produkty</MudText>
                        <MudToolBarSpacer />
                        <MudTextField Immediate="true" @bind-Value="searchString" Placeholder="Szukaj" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <ColGroup>
                        <col />
                        <col />
                        <col />
                        <col style="width: 20px" />
                    </ColGroup>
                    <HeaderContent>
                        <MudTh>Nazwa</MudTh>
                        <MudTh>Kategoria</MudTh>
                        <MudTh>Producent</MudTh>
                        <MudTh>Dostawca</MudTh>
                        <MudTh>Cena</MudTh>
                        <MudTh>Ilość</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Nazwa">@context.Name</MudTd>
                        <MudTd DataLabel="Kategoria">@context.Category</MudTd>
                        <MudTd DataLabel="Producent" HideSmall="true">@context.Producer</MudTd>
                        <MudTd DataLabel="Dostawca" HideSmall="true">@context.Supplier</MudTd>
                        <MudTd DataLabel="Cena" HideSmall="true">@context.Price zł</MudTd>
                        <MudTd DataLabel="Ilość">@context.Amount</MudTd>
                        <MudTd>
                            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                                <MudMenuItem @onclick="@((e) => OpenProductItemsDialog(context))">Egzęplarze</MudMenuItem>
                                <MudMenuItem @onclick="@((e) => OpenProductDetailsDialog(context.Id))">Szczegóły</MudMenuItem>
                            </MudMenu>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[] {8}" RowsPerPageString="Produkty na stronę" InfoFormat="{first_item}-{last_item} z {all_items}" />
                    </PagerContent>
                </MudTable>
            }
            else
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
            }
        </MudPaper>
    </MudItem>

</MudGrid>


@code {
    private List<Product> products;
    private string searchString = "";
    private SearchDto searchValue;
    private DialogOptions maxDialogWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };

    protected override async Task OnInitializedAsync()
    {
        products = await productsService.GetProducts();
    }

    private bool FilterFunc(Product product)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if ($"{product.Name} {product.Category} {product.Producer} {product.Supplier}".Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task<IEnumerable<SearchDto>> Search(string value)
    {
        if (string.IsNullOrEmpty(value))
            return new List<SearchDto>();

        return await searchService.Search(value);
    }

    private async Task OpenAddProductDialog()
    {
        var dialog = DialogService.Show<AddProductDialog>("Utwórz produkt", maxDialogWidth);
        var result = await dialog.Result;
        if (result is not null)
        {
            products = await productsService.GetProducts();
        }
    }

    private async Task OpenProductItemsDialog(Product product)
    {
        var parameters = new DialogParameters { ["product"] = product };
        DialogService.Show<ProductItemsDialog>("Egzęplarze produktu", parameters, maxDialogWidth);
    }

    private async Task OpenProductDetailsDialog(int productId)
    {
        var parameters = new DialogParameters { ["productId"] = productId };
        DialogService.Show<ProductDetailsDialog>("Szczegóły produktu", parameters, maxDialogWidth);
    }

    private void OpenSearchDialog(SearchDto searchDto)
    {
        if (searchDto.Type == SearchType.Product)
        {
            var parameters = new DialogParameters { ["productId"] = searchDto.Id };
            DialogService.Show<ProductDetailsDialog>("Szczegóły produktu", parameters, maxDialogWidth);
        }
        else if (searchDto.Type == SearchType.Item)
        {
            var parameters = new DialogParameters { ["itemId"] = searchDto.Id };
            var dialog = DialogService.Show<ItemDetailsDialog>("Szczegóły", parameters, maxDialogWidth);
        }
    }
}