@page "/adminPanel"
@using invMed.Data
@using invMed.Data.Enums
@using invMed.Controls.Admin
@inject IAdminService adminService
@inject IDialogService DialogService

@attribute [Authorize(Roles = AuthorizeRoleName.Admin)]

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4 mt-4">Panel Administratora</MudText>
<MudGrid>
    <MudItem xs="12" sm="6" md="6" lg="3">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height: 100px;">
            <MudIcon Icon="@Icons.Material.Filled.Public" Color="Color.Success" Class="mx-4 panelIcon"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">System</MudText>
                @if (users is not null)
                {
                    <MudText Typo="Typo.h5">online</MudText>
                }
                else
                {
                    <MudText Typo="Typo.h5">ofline</MudText>
                }
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="6" lg="3">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height: 100px;">
            <MudIcon Icon="@Icons.Material.Filled.PeopleAlt" Class="mx-4 panelIcon"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Użytkownicy</MudText>
                @if (users is not null)
                {
                    <MudText Typo="Typo.h5">@users.Count</MudText>
                }
                else
                {
                    <MudProgressCircular Size="Size.Small" Color="Color.Primary" Indeterminate="true" />
                }
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="6" lg="3">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height: 100px;">
            <MudIcon Icon="@Icons.Material.Filled.People" Class="mx-4 panelIcon"></MudIcon>
            <div>
                <MudButton Class="mt-2 mr-10" Variant="Variant.Filled" @onclick="OpenDeactivatedAccountsDialog">Nieaktywne konta</MudButton>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="6" lg="3">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height: 100px;">
            <MudIcon Icon="@Icons.Material.Filled.PersonAdd" Class="mx-4 panelIcon"></MudIcon>
            <div>
                <MudButton Class="mt-2 mr-10" Variant="Variant.Filled" Color="Color.Primary" @onclick="OpenCreateAccountDialog">Utwórz konto</MudButton>
            </div>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" lg="8">
        <MudPaper Elevation="25" Class="pa-4" Style="height: 610px; overflow-y: scroll">
            @if (users is not null)
            {
                <MudTable Breakpoint="Breakpoint.Sm" RowsPerPage="5" Elevation="0" Items="@users" Hover="true" Filter="new Func<UserView, bool>(FilterFunc)" HorizontalScrollbar="true">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Użytkownicy</MudText>
                        <MudSpacer />
                        <MudTextField Immediate="true" @bind-Value="searchString" Placeholder="Szukaj" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <ColGroup>
                        <col />
                        <col />
                        <col />
                        <col />
                        <col style="width: 20px" />
                    </ColGroup>
                    <HeaderContent>
                        <MudTh>Użytkownik</MudTh>
                        <MudTh>Nazwa użytkownika</MudTh>
                        <MudTh>Email</MudTh>
                        <MudTh>Rola</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Użytkownik">@context.Name @context.Surname</MudTd>
                        <MudTd DataLabel="Nazwa użytkownika">@context.UserName</MudTd>
                        <MudTd DataLabel="Email" HideSmall="true">@context.Email</MudTd>
                        <MudTd DataLabel="Rola">@context.Role</MudTd>
                        <MudTd DataLabel="Zarządzaj">
                            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                                <MudMenuItem @onclick="@((e) => OpenDetailsDialog(context))">Szczegóły</MudMenuItem>
                                <MudMenuItem @onclick="@((e) => OpenEditDialog(context))">Edytuj</MudMenuItem>
                                <MudMenuItem @onclick="@((e) => OpenResetPasswordDialog(context))">Resetuj<br />hasło</MudMenuItem>
                                <MudMenuItem @onclick="@((e) => OpenManageDialog(context))">Zarządzaj</MudMenuItem>
                            </MudMenu>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[] {5}" RowsPerPageString="Użytkownicy na stronę" InfoFormat="{first_item}-{last_item} z {all_items}" />
                    </PagerContent>
                </MudTable>
            }
            else
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
            }
        </MudPaper>
    </MudItem>

    <MudItem xs="12" lg="4">
        <MudPaper Elevation="25" Class="pa-4" Style="height: 610px;">
            @if (rolesNumbers is not null)
            {
                <MudText Class="mt-4 ml-2" Typo="Typo.h6">Role użytkowników</MudText>
                <MudChart Class="pt-16" ChartType="ChartType.Donut" InputData="@rolesNumbers" InputLabels="@rolesLabels" Style="max-height: 440px"></MudChart>
            }
            else
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
            }
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    private List<UserView> users;
    private string searchString = "";
    private double[] rolesNumbers;
    private string[] rolesLabels = { RoleName.Admin, RoleName.Manager, RoleName.Warehouseman };

    protected override async Task OnInitializedAsync()
    {
        users = await adminService.GetUsers();
        rolesNumbers = GetRolesArray();
    }

    private bool FilterFunc(UserView user)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if ($"{user.Name} {user.Surname} {user.Email} {user.UserName} {user.Role}".Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void OpenDetailsDialog(UserView user)
    {
        var parameters = new DialogParameters { ["user"] = user };
        DialogService.Show<UserDetailsDialog>("Szczegóły użytkownika", parameters);
    }

    private async Task OpenEditDialog(UserView user)
    {
        var parameters = new DialogParameters { ["userId"] = user.Id, ["role"] = user.Role };
        var dialog = DialogService.Show<UserEditDialog>("Edytuj użytkownika", parameters);
        var result = await dialog.Result;

        if (result is not null)
        {
            users = await adminService.GetUsers();
        }
    }

    private async Task OpenManageDialog(UserView user)
    {
        var parameters = new DialogParameters { ["userId"] = user.Id, ["role"] = user.Role };
        var dialog = DialogService.Show<UserManageDialog>("Zarządzaj użytkownikiem", parameters);
        var result = await dialog.Result;

        if (result is not null)
        {
            users = await adminService.GetUsers();
            rolesNumbers = GetRolesArray();
        }
    }

    private async Task OpenCreateAccountDialog()
    {
        var dialog = DialogService.Show<CreateAccountDialog>("Utwórz konto");
        var result = await dialog.Result;
        if (result is not null)
        {
            users = await adminService.GetUsers();
            rolesNumbers = GetRolesArray();
        }
    }

    private async Task OpenDeactivatedAccountsDialog()
    {
        var dialog = DialogService.Show<DeactivatedAccountsDialog>("Nieaktywne konta");
        var result = await dialog.Result;
        if (result is not null)
        {
            users = await adminService.GetUsers();
            rolesNumbers = GetRolesArray();
        }
    }

    private void OpenResetPasswordDialog(UserView user)
    {
        var parameters = new DialogParameters { ["userId"] = user.Id, ["role"] = user.Role };
        DialogService.Show<UserPasswordResetDialog>("Resetuj hasło", parameters);
    }

    private double[] GetRolesArray()
    {
        return new double[] { users.Count(u => u.Role == RoleName.Admin), users.Count(u => u.Role == RoleName.Manager), users.Count(u => u.Role == RoleName.Warehouseman) };
    }

}