@page "/inventory"
@using invMed.Data
@using invMed.Data.Enums
@using invMed.Controls.Inventory
@inject IInventoryService inventoryService
@inject IDialogService DialogService
@inject NavigationManager NavManager
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor

@attribute [Authorize(Roles = AuthorizeRoleName.WarehousemanAndManager)]

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4 mt-4">Inwentaryzacja</MudText>
<MudGrid>
    <MudItem xs="12" sm="12" md="8" lg="9">
        <MudPaper Elevation="25" Class="pa-4">
            <MudText Typo="Typo.h6">Inwentaryzacje</MudText>
            <MudContainer Class="mt-4 pl-2" Style="max-height: 740px; overflow-y: scroll">
                @if (inventories is not null)
                {
                    foreach (var inventory in inventories)
                    {
                        @if (UserName is not null && (inventory.UserNames.Contains(UserName) || IsManager))
                        {
                            <MudPaper Elevation="25" Class="pa-4 mb-4">
                                <MudGrid>
                                    <MudItem md="12" lg="7">
                                        <MudText><b>Nazwa:</b> @inventory.Name</MudText>
                                        <MudText><b>Typ:</b> @inventory.Type.GetDisplayName()</MudText>
                                        <MudText><b>Opis:</b> @inventory.Description</MudText>
                                        <MudText><b>Stan:</b> @inventory.State.GetDisplayName()</MudText>
                                        <MudText><b>Data planowanego rozpoczęcia:</b> @inventory.PlannedStartDate</MudText>
                                        @if (inventory.PlannedEndDate is not null)
                                        {
                                            <MudText><b>Data planowanego zakończenia:</b> @inventory.PlannedEndDate</MudText>
                                        }
                                        @if (inventory.StartDate is not null)
                                        {
                                            <MudText><b>Data rozpoczęcia:</b> @inventory.StartDate</MudText>
                                        }
                                        @if (inventory.EndDate is not null)
                                        {
                                            <MudText><b>Data zakończenia:</b> @inventory.EndDate</MudText>
                                        }
                                    </MudItem>
                                    <MudItem md="12" lg="5" Style="text-align: right;">

                                        <MudButton Variant="Variant.Filled" Class="mb-4" OnClick="@((e) => OpenInventoryDetailsDialog(inventory.Id))" Color="Color.Default">Szczegóły</MudButton>

                                        <AuthorizeView Roles="@AuthorizeRoleName.Warehouseman">
                                            <Authorized>
                                                @if (inventory.State == InventoryStateEnum.Inactive)
                                                {
                                                    <MudButton Variant="Variant.Filled" Class="ml-4 mb-4" Color="Color.Primary" OnClick="@((e) => OpenStartInventoryMessageBox(inventory.Id, inventory.Name, inventory.Description))">Rozpocznij</MudButton>
                                                }
                                                @if (inventory.State == InventoryStateEnum.Active)
                                                {
                                                    <MudButton Variant="Variant.Filled" Class="ml-4 mb-4" Color="Color.Secondary" OnClick="@((e) => OpenInventory(inventory.Id))">Kontynuuj</MudButton>
                                                }
                                            </Authorized>
                                        </AuthorizeView>

                                        <AuthorizeView Roles="@AuthorizeRoleName.Manager">
                                            <Authorized>
                                                @if (inventory.State == InventoryStateEnum.Active)
                                                {
                                                    <MudButton Variant="Variant.Filled" Class="ml-4 mb-4" Color="Color.Secondary" OnClick="@((e) => OpenFinishInventoryMessageBox(inventory.Id, inventory.Description))">Zakończ</MudButton>
                                                }
                                                @if (inventory.State != InventoryStateEnum.Inactive)
                                                {
                                                    <MudButton Variant="Variant.Filled" Class="ml-4 mb-4" Color="Color.Primary" OnClick="@((e) => OpenInventory(inventory.Id))">Podgląd</MudButton>
                                                }
                                            </Authorized>
                                        </AuthorizeView>

                                    </MudItem>
                                </MudGrid>
                            </MudPaper>
                        }
                    }
                }
                else
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                }
            </MudContainer>
        </MudPaper>
    </MudItem>

    <AuthorizeView Roles="@AuthorizeRoleName.Manager">
        <Authorized>
            <MudItem xs="12" sm="12" md="4" lg="3">
                <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4 mb-2" Style="height: 100px;">
                    <MudIcon Icon="@Icons.Material.Filled.Add" Class="mx-4" Style="width: 54px; height: 54px;"></MudIcon>
                    <div>
                        <MudButton Class="mt-2 mr-10" Variant="Variant.Filled" Color="Color.Primary" @onclick="OpenCreateInventoryDialog">Nowa inwentaryzacja</MudButton>
                    </div>
                </MudPaper>
            </MudItem>
        </Authorized>
    </AuthorizeView>

</MudGrid>


@code {
    private List<InventoryView> inventories;
    private string UserName;
    private bool IsManager;

    protected override async Task OnInitializedAsync()
    {
        UserName = httpContextAccessor.HttpContext.User.Identity.Name;
        IsManager = await inventoryService.IsManager(UserName);
        inventories = await inventoryService.GetInventories();
    }

    private async Task OpenCreateInventoryDialog()
    {
        var dialog = DialogService.Show<CreateInventoryDialog>("Nowa inwentaryzacja");
        var result = await dialog.Result;

        if (result is not null)
        {
            inventories = await inventoryService.GetInventories();
        }
    }

    private void OpenInventoryDetailsDialog(int id)
    {
        var parameters = new DialogParameters { ["inventoryId"] = id };
        DialogService.Show<InventoryDetailsDialog>("Szczegóły inwentaryzacji", parameters);
    }

    private async Task OpenStartInventoryMessageBox(int inventoryId, string name, string description)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Rozpocznij inventaryzację",
            "Czy na pewno chcesz rozpocząć tą inwentaryzację? " + name + " - " + description,
            yesText: "Rozpocznij", cancelText: "Anuluj");

        if (result == true)
        {
            await inventoryService.StartInventory(inventoryId);
            NavManager.NavigateTo("/inventory/" + inventoryId);
        }
    }

    private void OpenInventory(int inventoryId)
    {
        NavManager.NavigateTo("/inventory/" + inventoryId);
    }

    private async Task OpenFinishInventoryMessageBox(int inventoryId, string description)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Zakończ inventaryzację",
            "Czy na pewno chcesz zakończyć tą inwentaryzację? " + description,
            yesText: "Zakończ", cancelText: "Anuluj");

        if (result == true)
        {
            await inventoryService.FinishInventory(inventoryId);
            inventories = await inventoryService.GetInventories();
        }
    }
}