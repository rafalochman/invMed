@page "/inventory"
@using invMed.Data
@using invMed.Data.Enums
@using invMed.Controls.Inventory
@inject IInventoryService inventoryService
@inject IDialogService DialogService
@inject NavigationManager NavManager

@attribute [Authorize(Roles = "Admin")]

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4 mt-4">Inwentaryzacja</MudText>
<MudGrid>
    <MudItem xs="12" sm="12" md="8" lg="9">
        <MudPaper Elevation="25" Class="pa-4" Style="min-height: 680px;">
            <MudText Typo="Typo.h6">Inwentaryzacje</MudText>
            @if (inventories is not null)
            {
                foreach (var inventory in inventories)
                {
                    <MudPaper Elevation="25" Class="pa-4 mt-4">
                        <MudGrid>
                            <MudItem md="12" lg="7">
                                <MudText><b>Typ:</b> @inventory.Type.GetDisplayName()</MudText>
                                <MudText><b>Opis:</b> @inventory.Description</MudText>
                                <MudText><b>Stan:</b> @inventory.State.GetDisplayName()</MudText>
                                <MudText><b>Data planowanego rozpoczęcia:</b> @inventory.PlannedStartDate</MudText>
                                @if (inventory.PlannedEndDate is not null)
                                {
                                    <MudText><b>Data planowanego zakończenia:</b> @inventory.PlannedEndDate</MudText>
                                }
                                @if (inventory.StartDate is not null)
                                {
                                    <MudText><b>Data rozpoczęcia:</b> @inventory.StartDate</MudText>
                                }
                                @if (inventory.EndDate is not null)
                                {
                                    <MudText><b>Data zakończenia:</b> @inventory.EndDate</MudText>
                                }
                            </MudItem>
                            <MudItem md="12" lg="5" Style="text-align: right;">
                                <MudButton Variant="Variant.Filled" Class="mr-4" OnClick="@((e) => OpenInventoryDetailsDialog(inventory.Id))" Color="Color.Default">Szczegóły</MudButton>
                                @if (inventory.State == InventoryState.Inactive)
                                {
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@((e) => OpenStartInventoryMessageBox(inventory.Id, inventory.Description))">Rozpocznij</MudButton>
                                }
                                @if (inventory.State == InventoryState.Active)
                                {
                                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@((e) => ContinueInventory(inventory.Id))">Kontynuuj</MudButton>
                                }
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                }
            }
            else
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
            }
        </MudPaper>
    </MudItem>

    <MudItem xs="12" sm="12" md="4" lg="3">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height: 100px;">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mx-4" Style="width: 54px; height: 54px;"></MudIcon>
            <div>
                <MudButton Class="mt-2 mr-10" Variant="Variant.Filled" Color="Color.Primary" @onclick="OpenCreateInventoryDialog">Nowa inwentaryzacja</MudButton>
            </div>
        </MudPaper>
    </MudItem>

</MudGrid>


@code {
    private DialogOptions maxDialogWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
    private List<InventoryView> inventories;

    protected override async Task OnInitializedAsync()
    {
        inventories = await inventoryService.GetInactiveAndActiveInventories();
    }

    private async Task OpenCreateInventoryDialog()
    {
        var dialog = DialogService.Show<CreateInventoryDialog>("Nowa inwentaryzacja", maxDialogWidth);
        var result = await dialog.Result;

        if (result is not null)
        {
            inventories = await inventoryService.GetInactiveAndActiveInventories();
        }
    }

    private void OpenInventoryDetailsDialog(int id)
    {
        var parameters = new DialogParameters { ["inventoryId"] = id };
        DialogService.Show<InventoryDetailsDialog>("Szczegóły inwentaryzacji", parameters, maxDialogWidth);
    }

    private async Task OpenStartInventoryMessageBox(int inventoryId, string description)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Rozpocznij inventaryzację",
            "Czy na pewno chcesz rozpocząć tą inwentaryzację? " + description,
            yesText: "Rozpocznij", cancelText: "Anuluj");

        if (result == true)
        {
            await inventoryService.StartInventory(inventoryId);
            NavManager.NavigateTo("/inventory/" + inventoryId);
        }
    }

    private void ContinueInventory(int inventoryId)
    {
        NavManager.NavigateTo("/inventory/" + inventoryId);
    }
}