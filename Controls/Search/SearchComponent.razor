@using invMed.Data
@using invMed.Controls.Products
@using invMed.Data.Enums
@inject ISearchService searchService
@inject IDialogService DialogService

<MudIcon Icon="@Icons.Material.Filled.Search" Color="Color.Primary" Class="mx-4 panelIcon"></MudIcon>
<MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Wyszukiwarka</MudText>
<MudAutocomplete T="SearchDto" Label="Szukaj" Class="ml-4 mr-4" Clearable="true" ResetValueOnEmptyText="true" ToStringFunc="@(e=> e==null ? null : e.Type == SearchTypeEnum.Product ? e.Name : e.Barcode)" Value="searchValue" ValueChanged="OpenSearchDialog" SearchFunc="@Search" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary">
    <ItemTemplate Context="e">
        <MudText>
            @(e.Type == SearchTypeEnum.Item ? e.Barcode : e.Name)
        </MudText>
        <MudText Typo="Typo.caption">
            @(e.Type == SearchTypeEnum.Item ? e.Name : e.Category)
        </MudText>
    </ItemTemplate>
</MudAutocomplete>

@code {
    private SearchDto searchValue;

    private async Task<IEnumerable<SearchDto>> Search(string value)
    {
        if (string.IsNullOrEmpty(value))
            return new List<SearchDto>();

        return await searchService.Search(value);
    }

    private void OpenSearchDialog(SearchDto searchDto)
    {
        if (searchDto.Type == SearchTypeEnum.Product)
        {
            var parameters = new DialogParameters { ["productId"] = searchDto.Id };
            DialogService.Show<ProductDetailsDialog>("Szczegóły produktu", parameters);
        }
        else if (searchDto.Type == SearchTypeEnum.Item)
        {
            var parameters = new DialogParameters { ["itemId"] = searchDto.Id };
            DialogService.Show<ItemDetailsDialog>("Szczegóły", parameters);
        }
    }
}
