@using invMed.Data
@inject AdminService adminService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudPaper Style="min-height: 640px" Elevation="2">
            <MudContainer Style="text-align: center" MaxWidth="MaxWidth.ExtraSmall">
                @if (user is not null)
                {
                    <MudAvatar Class="mt-12" Size="Size.Large" Color="Color.Secondary">@user.Name[0]@user.Surname[0]</MudAvatar>
                    <MudText Class="mt-4">@user.Name @user.Surname</MudText>
                    <MudText>@role</MudText>
                    <MudText Class="mt-8" Typo="Typo.h6">Change role</MudText>
                    <MudSelect Label="Select role" @bind-Value="newRole">
                        <MudSelectItem Value="@("User")">User</MudSelectItem>
                        <MudSelectItem Value="@("Manager")">Manager</MudSelectItem>
                        <MudSelectItem Value="@("Admin")">Admin</MudSelectItem>
                    </MudSelect>
                    <br />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-2" @onclick="@UpdateRole">Save</MudButton>
                    <MudText Class="mt-8" Typo="Typo.h6">Remove account</MudText>
                    <MudButton Class="mt-4" Variant="Variant.Filled" Color="Color.Primary" @onclick="() => tryRemove = true">Remove account</MudButton>
                    if (tryRemove)
                    {
                        <MudText Class="mt-8" Typo="Typo.h6">Are you sure?</MudText>
                        <MudButton Class="mt-4 mr-4" Variant="Variant.Filled" Color="Color.Secondary" @onclick="() => tryRemove = false">No</MudButton>
                        <MudButton Class="mt-4" Variant="Variant.Filled" Color="Color.Default" @onclick="@RemoveUser">Yes</MudButton>
                    }
                }
                else
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                }
            </MudContainer>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string userId { get; set; }
    [Parameter] public string role { get; set; }
    private AspNetUser user;
    private bool tryRemove = false;
    private string newRole;

    void Submit() => MudDialog.Close(DialogResult.Ok(true));

    protected override async Task OnInitializedAsync()
    {
        user = await Task.Run(() => adminService.GetUserById(userId));
        newRole = role;
    }

    private async void RemoveUser()
    {
        var result = await adminService.DeleteUser(user);
        if (result)
        {
            Snackbar.Add("Success, account removed", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
        {
            Snackbar.Add("Error, account not removed", Severity.Error);
        }
    }

    private async void UpdateRole()
    {
        var result = await adminService.RemoveFromRole(user, role);
        if (result)
        {
            var res = await adminService.AddToRole(user, newRole);
            if (res)
            {
                role = newRole;
                Snackbar.Add("Success, role changed", Severity.Success);
            }
            else
            {
                Snackbar.Add("Warning, user do not have any role", Severity.Warning);
            }
        }
        else
        {
            Snackbar.Add("Error, role not changed", Severity.Error);
        }
        await InvokeAsync(StateHasChanged);
    }

}
