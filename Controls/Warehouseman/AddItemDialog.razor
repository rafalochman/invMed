@using invMed.Data
@inject WarehousemanService warehousemanService
@inject ISnackbar Snackbar
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor

<MudDialog>
    <DialogContent>
        <MudPaper Style="min-height: 640px" Elevation="2">
            <MudContainer Style="text-align: center" MaxWidth="MaxWidth.ExtraSmall">
                <EditForm Model="@input" @bind-IsValid="@success" OnValidSubmit="OnValidSubmit">
                    <DataAnnotationsValidator />
                    <MudText Class="pt-8" Typo="Typo.h6">Dodaj towar</MudText>
                    <MudAutocomplete T="string" Label="Produkt" Immediate="true" ResetValueOnEmptyText="true" For="@(() => input.ProductName)" @bind-Value="input.ProductName" SearchFunc="@SearchProduct" Clearable="true" />
                    <MudAutocomplete T="string" Label="Miejsce" Immediate="true" ResetValueOnEmptyText="true" For="@(() => input.Place)" @bind-Value="input.Place" SearchFunc="@SearchPlace" Clearable="true" Class="mt-2"/>
                    <MudDatePicker @ref="_picker" Label="Data ważności" @bind-Date="input.ExpirationDate" AutoClose="true" DateFormat="dd/MM/yyyy">
                        <PickerActions>
                            <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">Wyczyść</MudButton>
                            <MudButton OnClick="@(() => _picker.Close(false))">Anuluj</MudButton>
                        </PickerActions>
                    </MudDatePicker>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-8">Dodaj i generuj kod</MudButton>
                </EditForm>
            </MudContainer>
            @if(barcodeUrl != null && barcodeUrl != "")
            {
            <MudContainer Class="mt-16" Style="text-align: center">
                <div><img src="@barcodeUrl" /></div>
                <MudText Style="color: black">@barcode</MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-8"><a href="@barcodeUrl" download="@(barcode).jpg" style="color: white">Pobierz kod</a></MudButton>
            </MudContainer>
            }
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>


@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    private AddItemInput input = new AddItemInput();
    private bool success;
    private MudDatePicker _picker;
    private string barcode;
    private string barcodeUrl;

    void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private async void OnValidSubmit()
    {
        var userName = httpContextAccessor.HttpContext.User.Identity.Name;
        var barcodeTuple = await warehousemanService.AddItemAndGetBarcode(input, userName);
        barcode = barcodeTuple.barcode;
        barcodeUrl = barcodeTuple.barcodeUrl;
        if (barcodeUrl != null && barcodeUrl != "")
        {
            Snackbar.Add("Sukces, towar został dodany.", Severity.Success);
        }
        else
        {
            Snackbar.Add("Błąd, towar nie został dodany.", Severity.Error);
        }
        StateHasChanged();
    }

    private async Task<IEnumerable<string>> SearchProduct(string value)
    {
        if (string.IsNullOrEmpty(value))
            return await warehousemanService.GetAllProductsNames();

        return await warehousemanService.SearchProductsNames(value);
    }

    private async Task<IEnumerable<string>> SearchPlace(string value)
    {
        if (string.IsNullOrEmpty(value))
            return await warehousemanService.GetAllPlacesNames();

        return await warehousemanService.SearchPlacesNames(value);
    }

}