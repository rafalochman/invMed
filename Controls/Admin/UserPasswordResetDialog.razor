@using invMed.Data
@inject AdminService adminService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudPaper Style="min-height: 640px" Elevation="2">
            <MudContainer Style="text-align: center" MaxWidth="MaxWidth.ExtraSmall">
                @if (user is not null)
                {
                    <MudAvatar Class="mt-12" Size="Size.Large" Color="Color.Secondary">@user.Name[0]@user.Surname[0]</MudAvatar>
                    <MudText Class="mt-4">@user.Name @user.Surname</MudText>
                    <MudText>@role</MudText>
                    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                        <DataAnnotationsValidator />
                        <MudTextField Class="mt-6" Label="Nowe hasło" @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                        <MudTextField Class="mt-4" Label="Potwierdź nowe hasło" @bind-Value="model.ConfirmPassword" For="@(() => model.ConfirmPassword)" InputType="InputType.Password" />
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">Zapisz</MudButton>
                    </EditForm>
                }
                else
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                }
            </MudContainer>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string userId { get; set; }
    [Parameter] public string role { get; set; }
    private ResetPasswordInput model = new ResetPasswordInput();
    private AspNetUser user;

    void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private async void OnValidSubmit()
    {
        var result = await adminService.ResetPassword(user, model.Password);
        if (result)
        {
            Snackbar.Add("Sukces, hasło zostało zresetowane.", Severity.Success);
        }
        else
        {
            Snackbar.Add("Błąd, hasło nie zostało zmienione.", Severity.Error);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        user = await Task.Run(() => adminService.GetUserById(userId));
    }
}
