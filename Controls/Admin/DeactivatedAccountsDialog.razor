@using invMed.Data
@using invMed.Data.Enums
@inject IAdminService adminService
@inject ISnackbar Snackbar

@attribute [Authorize(Roles = AuthorizeRoleName.Admin)]

<MudDialog>
    <DialogContent>
        <MudPaper Style="min-height: 640px" Elevation="2" Class="pa-4">
            @if (users is not null)
            {
                <MudTable Breakpoint="Breakpoint.None" RowsPerPage="5" Elevation="0" Items="@users" Hover="true" Filter="new Func<UserView, bool>(FilterFunc)">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Użytkownicy</MudText>
                        <MudSpacer />
                        <MudTextField Immediate="true" @bind-Value="searchString" Placeholder="Szukaj" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <ColGroup>
                        <col />
                        <col style="width: 20px" />
                    </ColGroup>
                    <HeaderContent>
                        <MudTh>Użytkownik</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Użytkownik">@context.Name @context.Surname</MudTd>
                        <MudTd DataLabel="Aktywuj">
                            <MudTooltip Text="Aktywuj">
                                <MudIconButton OnClick="@((e) => ActivateAccount(context.Id))" Icon="@Icons.Material.Filled.PersonAdd"></MudIconButton>
                            </MudTooltip>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[] {5}" RowsPerPageString="Użytkownicy na stronę" InfoFormat="{first_item}-{last_item} z {all_items}" />
                    </PagerContent>
                </MudTable>
            }
            else
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
            }
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Submit">Zamknij</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    private List<UserView> users;
    private string searchString = "";

    protected override async Task OnInitializedAsync()
    {
        users = await Task.Run(() => adminService.GetDeactivatedUsers());
    }

    private bool FilterFunc(UserView user)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if ($"{user.Name} {user.Surname} {user.Email} {user.UserName} {user.Role}".Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async void ActivateAccount(string userId)
    {
        var result = await adminService.ActivateAccount(userId);
        if (result)
        {
            Snackbar.Add("Sukces, konto zostało aktywowane.", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
        {
            Snackbar.Add("Błąd, konto nie zostało aktywowane.", Severity.Error);
        }
    }

    private void Submit() => MudDialog.Close(DialogResult.Ok(true));

}