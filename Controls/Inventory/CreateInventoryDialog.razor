@using invMed.Data
@using invMed.Data.Enums
@inject IInventoryService inventoryService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudPaper Style="min-height: 640px" Elevation="2">
            <MudContainer Style="text-align: center" MaxWidth="MaxWidth.ExtraSmall">
                <EditForm Model="@input" @bind-IsValid="@success" OnValidSubmit="OnValidSubmit">
                    <DataAnnotationsValidator />
                    <MudText Class="pt-8" Typo="Typo.h6">Utwórz inwentaryzację</MudText>
                    <MudSelect Style="text-align: left" Class="mt-2" Required="true" T="InventoryTypeEnum?" @bind-Value="input.Type" For="@(() => input.Type)" Immediate="true" Label="Typ">
                        <MudSelectItem T="InventoryTypeEnum?" Value="@InventoryTypeEnum.Full">@InventoryTypeEnum.Full.GetDisplayName()</MudSelectItem>
                        <MudSelectItem T="InventoryTypeEnum?" Value="@InventoryTypeEnum.Partial">@InventoryTypeEnum.Partial.GetDisplayName()</MudSelectItem>
                    </MudSelect>
                    <MudTextField Label="Opis" Immediate="true" Required="true" Class="mt-2" @bind-Value="input.Description" For="@(() => input.Description)" />
                    <MudDatePicker @ref="_startPicker" Required="true" Class="mt-1" Label="Data planowanego rozpoczęcia" @bind-Date="input.PlannedStartDate" AutoClose="true" DateFormat="dd/MM/yyyy" For="@(() => input.PlannedStartDate)">
                        <PickerActions>
                            <MudButton Class="mr-auto align-self-start" OnClick="@(() => _startPicker.Clear())">Wyczyść</MudButton>
                            <MudButton OnClick="@(() => _startPicker.Close(false))">Anuluj</MudButton>
                        </PickerActions>
                    </MudDatePicker>
                    <MudDatePicker @ref="_endPicker" Class="mt-1" Label="Data planowanego zakończenia" @bind-Date="input.PlannedEndDate" AutoClose="true" DateFormat="dd/MM/yyyy">
                        <PickerActions>
                            <MudButton Class="mr-auto align-self-start" OnClick="@(() => _endPicker.Clear())">Wyczyść</MudButton>
                            <MudButton OnClick="@(() => _endPicker.Close(false))">Anuluj</MudButton>
                        </PickerActions>
                    </MudDatePicker>
                    @if(warehousemen is not null)
                    {
                        <MudSelect T="string" Class="mt-2" Required="true" Label="Magazynierzy" HelperText="Wybierz magazynierów którzy będą przeprowadzać inwentaryzację" MultiSelection="true" @bind-SelectedValues="input.Warehousemen">
                            @foreach (var warehouseman in warehousemen)
                            {
                                <MudSelectItem T="string" Value="@warehouseman">@warehouseman</MudSelectItem>
                            }
                        </MudSelect>
                    }
                    @if (input.Type == InventoryTypeEnum.Partial && places is not null)
                    {
                        <MudSelect T="string" Class="mt-1" Required="true" Label="Miejsca" HelperText="Wybierz miejsca dla których będzie przeprowadzana inwentaryzcja" MultiSelection="true" @bind-SelectedValues="input.Places">
                            @foreach (var place in places)
                            {
                                <MudSelectItem T="string" Value="@place">@place</MudSelectItem>
                            }
                        </MudSelect>
                    }
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto mt-8">Utwórz</MudButton>
                </EditForm>
            </MudContainer>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    private CreateInventoryInput input = new CreateInventoryInput();
    private MudDatePicker _startPicker;
    private MudDatePicker _endPicker;
    private bool success;
    private string[] places;
    private string[] warehousemen;

    protected override async Task OnInitializedAsync()
    {
        places = await inventoryService.GetPlacesNames();
        warehousemen = await inventoryService.GetWarehousemenLogins();
    }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private async void OnValidSubmit()
    {
        var result = await inventoryService.CreateInventory(input);
        if (result)
        {
            Snackbar.Add("Sukces, inwentaryzacja została utworzona.", Severity.Success);
        }
        else
        {
            Snackbar.Add("Błąd, inwentaryzacja nie została utworzona.", Severity.Error);
        }
        MudDialog.Close(DialogResult.Ok(true));
    }

}